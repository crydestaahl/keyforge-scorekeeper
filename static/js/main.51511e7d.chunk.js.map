{"version":3,"sources":["serviceWorker.js","keyforge.js","keforgeGame.js","index.js","img/keyforge-bg.jpg"],"names":["Boolean","window","location","hostname","match","btnStyle","margin","op","opacity","opZ","maxHeight","padding","CheckText","styled","p","_templateObject","WinnerText","_templateObject2","H2","h2","_templateObject3","Player","props","_useState","useState","_useState2","Object","slicedToArray","gems","setGems","_useState3","_useState4","keys","setKeys","react_default","a","createElement","className","style","name","Button_default","variant","color","onClick","logoUrl","setBackgroundImg","backgroundImage","concat","backgroundSize","height","width","center","textAlign","paddingLeft","paddingRight","logoStyle","backgroundColor","TheGame","index_es","container","spacing","item","sm","src","alt","title","Paper_default","keyforge","id","ReactDOM","render","keforgeGame","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__"],"mappings":"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","file":"static/js/main.51511e7d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {useState} from 'react'; \nimport Button from '@material-ui/core/Button';\nimport styled from 'styled-components';\n\n\nconst btnStyle = {\n    margin: '8px 8px 15px 8px',         \n}\n\nconst op = {\n    opacity: '1',\n}\n\nconst opZ = {\n    opacity: '0',\n    maxHeight: '0 px',\n    margin: '0'\n}\n\nconst padding = {\n    padding: '15px'\n}\n\nconst CheckText = styled.p`\n    @import url('https://fonts.googleapis.com/css?family=Cute+Font|Lato&display=swap');\n    color: white;\n    background: red; \n    border-radius: 5px; \n    font-size: 30px;\n    font-family: 'Cute Font', cursive;\n`\n\nconst WinnerText = styled.p`\n    @import url('https://fonts.googleapis.com/css?family=Cute+Font|Lato&display=swap');\n    color: white;\n    background: green; \n    border-radius: 5px; \n    font-size: 30px;\n    font-family: 'Cute Font', cursive;\n`\n\nconst H2 = styled.h2`\n   \n    font-size: 30px;\n    font-family: 'Cute Font', cursive;\n    text-transform: uppercase;\n    color: #330;\n    margin: 0;\n    padding-bottom: 0;  \n`\n\nfunction Player( props ) {\n    const [gems, setGems] = useState(0); \n    const [keys, setKeys] = useState(0); \n\n    return (\n            <div className=\"wrapper\"> \n                <div style={op}>\n                    <H2 style={padding}>{ props.name }</H2>\n                    \n                    <CheckText style={gems >= 6 ? op : opZ }>&nbsp;CHECK!</CheckText>                                        \n                    \n                    <H2> Gems: {gems} </H2>                    \n\n                    <Button style={btnStyle} variant='contained'color='primary' \n                    onClick={() => setGems(gems + 1)}>\n                    +\n                    </Button>     \n                \n                    <Button style={btnStyle} variant='contained' color='secondary' onClick={() => setGems(gems - 1)}>\n                    -\n                    </Button>       \n                    \n                    <WinnerText style={keys >= 3 ? op : opZ} >&nbsp;WINNER!</WinnerText>\n\n                    <H2> Keys: {keys}</H2>\n                    \n                    <Button style={btnStyle} variant='contained'color='primary' \n                    onClick={() => setKeys(keys + 1)}>\n                        +\n                    </Button>        \n                    <Button style={btnStyle} variant='contained' color='secondary' onClick={() => setKeys(keys - 1)}>\n                        -\n                    </Button>                    \n                </div>                       \n            </div>\n    );\n}\n\nexport default Player; ","import React from 'react'; \nimport Player from './keyforge';\nimport { Grid } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport backgroundImage from './img/keyforge-bg.jpg';\n\nconst logoUrl = 'https://images-cdn.fantasyflightgames.com/filer_public/15/91/15912457-5917-474f-8ce3-9dd24e1659e3/kf01_logo.png'\n\nconst setBackgroundImg = {\n    backgroundImage: `url(${backgroundImage})`,\n    backgroundSize: 'cover',\n    height: '100vh',\n    width: '100vw',\n    margin: '0 auto',    \n}\n\nconst height = {\n    height: '50px'\n}\n\nconst center = {\n    width: '400px',\n    margin: '0 auto',\n    textAlign: 'center',    \n    paddingLeft: '23px',\n    paddingRight: '23px'\n}\n\nconst logoStyle = {\n    width: '300px',\n    height: '250' \n}\n\nconst opacity = {\n    backgroundColor: 'rgba(255, 255, 255, .1)'\n}\n\nfunction TheGame( props ) {\n\n    return (\n        <Grid container spacing={24} style={setBackgroundImg}>   \n            <Grid item style={height} sm={12} >\n                <img src={logoUrl} style={logoStyle} alt=\"Keyforge Logo\" title=\"Keyforge Logo\" />\n            </Grid>     \n            <Grid item sm={6} style={center}>\n                <Paper style={opacity}>\n                    <Player name=\"Player 1\" id='1' />            \n                </Paper>\n            </Grid>\n            \n            <Grid item sm={6} style={center}>\n                <Paper style={opacity}>\n                    <Player name=\"Player 2\" id='2' />\n                </Paper>\n            </Grid>            \n        </Grid>\n    );\n}\n\nexport default TheGame; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'normalize.css'; \n\nimport TheGame from './keforgeGame';\n\nReactDOM.render(<TheGame />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/keyforge-bg.01bd39f2.jpg\";"],"sourceRoot":""}